MODULE Salary;

REQUIRE EmployeeDop, MoveMoneyOpreration, EmployeeAbsence, MoneyAccounting;

NAMESPACE Salary;

CLASS ReportingMonth 'Отчетный месяц';
month 'Месяц' = DATA Month (ReportingMonth) NONULL ;
numberMonth 'Месяц' (ReportingMonth r) = number(month(r));
nameMonth 'Месяц' (ReportingMonth r) = staticCaption(month(r));
year 'Год' = DATA INTEGER (ReportingMonth) NONULL ;
closed 'Закрыт' = DATA BOOLEAN (ReportingMonth);
curRate 'Курс обмена, USD' =  DATA NUMERIC[20,13] (ReportingMonth);
sumBonus 'Премия' =  DATA NUMERIC[12,2] (ReportingMonth);
note 'Примечание' = DATA STRING (ReportingMonth);

reportingMonth = GROUP AGGR ReportingMonth r BY year(r), month(r);

maxYearReportingMonth = GROUP MAX year(ReportingMonth r);
maxMonthReportingMonth = month(GROUP MAX number(month(ReportingMonth r)) IF year(r)=maxYearReportingMonth()) ;

// Первый не закрытый отчетный месяц
minYearNoClosed = GROUP MIN year(ReportingMonth r) IF NOT closed(r);
minMonthNoClosed = month(GROUP MIN number(month(ReportingMonth r)) IF NOT closed(r) AND year(r)=minYearNoClosed());
minReportingMonthNoClosed = reportingMonth(minYearNoClosed(),minMonthNoClosed());

CLASS Transfer 'Выплата';
in 'Отм.' = DATA LOCAL NESTED BOOLEAN (Transfer);
number 'Номер документа' = DATA STRING[15] (Transfer) CHARWIDTH 5;
date 'Дата документа' = DATA DATE (Transfer) NONULL ;
month 'Месяц' = DATA Month (Transfer) NONULL ;
numberMonth 'Месяц' (Transfer t) = number(month(t));
nameMonth 'Месяц' (Transfer t) = staticCaption(month(t)) CHARWIDTH 5;

year 'Год' = DATA INTEGER (Transfer) NONULL ;
operation 'Операция' = DATA MoveMoneyOpreration (Transfer) NONULL ;
nameOperation 'Операция' (Transfer t) = name(operation(t)) CHARWIDTH 5;
codeOperation 'Код операции' (Transfer t) = code(operation(t)) CHARWIDTH 5;
employee 'Сотрудник' = DATA Employee (Transfer) NONULL ;
nameEmployee 'Сотрудник' (Transfer t) = fullName(employee(t)) CHARWIDTH 5;

sum 'Сумма' = DATA NUMERIC[12,2] (Transfer);
note 'Примечание' = DATA STRING (Transfer);

registerAccounting 'Регистр учета' = DATA RegisterAccounting (Transfer) ;
nameRegisterAccounting 'Регистр учета' (Transfer t) = name(registerAccounting(t));
codeRegisterAccounting 'Регистр учета' (Transfer t) = code(registerAccounting(t));

// Тип записи (введён, из-за того, что убрали все операции и оставили только с кодом 'ЗП'
// значение: если не заполнено - обычная выплата ;  = '1' - отклонение на след. месяц, сформированное программно
type 'Тип записи' = DATA STRING[1] (Transfer);

transfer = GROUP MAX Transfer t BY number(t), date(t), operation(t);

sumTransfer 'Выплачено' = GROUP SUM sum(Transfer t) BY employee(t), month(t), year(t);


CLASS Salary 'Зарплата сотрудников';
in 'Отм.' = DATA LOCAL BOOLEAN (Salary);
month 'Месяц' = DATA Month (Salary) NONULL ;
numberMonth 'Месяц' (Salary s) = number(month(s));
nameMonth 'Месяц' (Salary s) = staticCaption(month(s))  CHARWIDTH 7;

year 'Год' = DATA INTEGER (Salary) NONULL ;
employee 'Сотрудник' = DATA Employee (Salary) NONULL ;
nameEmployee 'Сотрудник' (Salary s) = fullName(employee(s)) CHARWIDTH 15;
sumSalary 'Оклад' = DATA NUMERIC[12,2] (Salary);

sumBonus1 'Премия-1' = DATA NUMERIC[12,2] (Salary);
sumBonus2 'Премия-2' = DATA NUMERIC[12,2] (Salary);
sumBonus3 'Премия-3' = DATA NUMERIC[12,2] (Salary);
sumBonusQuarter 'Премия за квартал' = DATA NUMERIC[12,2] (Salary);
sumBonus 'Премия' (Salary s) = sumBonus1(s) (+) sumBonus2(s) (+) sumBonus3(s) (+) sumBonusQuarter(s);

ktu 'КТУ' = DATA NUMERIC[7,2] (Salary);

sumFine1 'Штраф-1'   = DATA NUMERIC[12,2] (Salary);
sumFine2 'Штраф-2'   = DATA NUMERIC[12,2] (Salary);
sumFine3 'Штраф-3'   = DATA NUMERIC[12,2] (Salary);
sumFine 'Штраф' (Salary s) = sumFine1(s) (+) sumFine2(s) (+) sumFine3(s);

note1 'Примечание-1' = DATA STRING (Salary);
note2 'Примечание-2' = DATA STRING (Salary);

sumPay 'Сумма к выплате' = DATA NUMERIC[12,2] (Salary);
sumPayUSD 'Сумма к выплате, USD' = DATA NUMERIC[12,2] (Salary);

sumTransfer 'Выплачено' (Salary s) = sumTransfer(employee(s), month(s), year(s));

payExtra 'Доплатить (в бухгалтерию)' = DATA NUMERIC[12,2] (Salary);
payExtraCash 'Доплатить наличными' = DATA NUMERIC[12,2] (Salary);
deltaPay 'Отклонение' = DATA NUMERIC[12,2] (Salary);
deltaReal 'Отклонение реальное' = DATA NUMERIC[12,2] (Salary);
isReturn 'Возврат' = DATA BOOLEAN (Salary);

salary = GROUP AGGR Salary s BY employee(s), year(s), month(s);

countSalaryReportingMonth(ReportingMonth r) = GROUP SUM 1 IF year(Salary s)==year(r) AND month(s)==month(r);

absenceHours 'Личное за месяц' (Salary s) = GROUP SUM hours(Absence a, DATE d) IF employee(a)=employee(s) AND extractYear(d)=year(s) AND extractMonth(d)=month(s) AND 
    nameReason(a)='Личное';

/// Вид платежа
CLASS TypePayment 'Вид платежа';
TABLE typePayment(TypePayment);

name 'Наименование' = DATA STRING[20](TypePayment);

FORM typePayments 'Виды платежа'
    OBJECTS t = TypePayment
    PROPERTIES(t) READONLY name
    PROPERTIES (t) NEWSESSION NEW, EDIT, DELETE
    
    LIST TypePayment OBJECT t
;

FORM typePayment 'Вид платежа'
    OBJECTS t = TypePayment PANEL
    PROPERTIES(t) name
    EDIT TypePayment OBJECT t
;

typePayment 'Вид платежа' = DATA TypePayment (Transfer);
nameTypePayment 'Вид платежа' (Transfer t) = name(typePayment(t));

/// Исп. для ввода новой записи (корр-ка всех полей)
FORM reportingMonth 'Отчетный месяц'
    OBJECTS r = ReportingMonth PANEL
    PROPERTIES(r) nameMonth, year, curRate, sumBonus, closed, note
    EVENTS ON INIT {
        year(r)  <- OVERRIDE maxYearReportingMonth(), extractYear(currentDate());
        month(r) <- OVERRIDE maxMonthReportingMonth(), extractMonth(currentDate());
        IF maxYearReportingMonth() AND maxMonthReportingMonth() THEN {
            IF number(maxMonthReportingMonth()) < 12 THEN
                month(r) <- month(number(maxMonthReportingMonth())+1) ;
            ELSE {
                month(r) <- month(1);
                year(r) <- year(r) + 1;
            }        
        }
        LOCAL t = TypeExchange ();
        t() <- GROUP MAX (TypeExchange t) IF name(t) = 'НБРБ (BYN)';
        curRate(r) <- rateOn(t(), currency('USD'), currentDate());
    }
;

DESIGN reportingMonth {
    OBJECTS {
        NEW cnt1 {
            MOVE PROPERTY (nameMonth(r));
            MOVE PROPERTY (year(r));
            MOVE PROPERTY (curRate(r));
            MOVE PROPERTY (sumBonus(r));
            MOVE PROPERTY (closed(r));
            MOVE PROPERTY (note(r));
        }
    }
}

newReportingMonth 'Добавить отч.месяц'() {
    NEWSESSION {
        NEW r = ReportingMonth {
            DIALOG reportingMonth OBJECTS r = r NOMANAGESESSION DO {
                
            } ELSE {
                CANCEL;
            }
            APPLY;
        }    
    }
} IMAGE 'add.png';

/// Исп. для редактирования записи (корр-ка полей без полей Год и Месяц !!!)
FORM editReportingMonth 'Отчетный месяц'
    OBJECTS r = ReportingMonth PANEL
    PROPERTIES(r) READONLY nameMonth, year
    PROPERTIES(r) curRate, sumBonus, closed, note
    EDIT ReportingMonth OBJECT r
;

DESIGN editReportingMonth {
    OBJECTS {
        NEW cnt1 {
            MOVE PROPERTY (nameMonth(r));
            MOVE PROPERTY (year(r));
            MOVE PROPERTY (curRate(r));
            MOVE PROPERTY (sumBonus(r));
            MOVE PROPERTY (closed(r));
            MOVE PROPERTY (note(r));
        }
    }
}


 editReportingMonth 'Редактировать'(ReportingMonth r) {
    NEWSESSION {
        DIALOG  editReportingMonth OBJECTS r = r NOMANAGESESSION DO {
            
        } ELSE {
            CANCEL;
        }
        APPLY;
    }    
} IMAGE 'edit.png';
///

// Кнопки для "калькулятора"
setPayExtra '+ Откл.' (Salary s) {
    IF NOT payExtra(s) (+) deltaPay(s) < 0.0 THEN {
        payExtra(s) <- payExtra(s) (+) deltaPay(s);
        deltaPay(s) <- NULL;
    }
    ELSE {
        payExtra(s) <- NULL;
        deltaPay(s) <- deltaPay(s) (-) payExtra(s);
    }
}
setPayExtraCash '+ Откл.' (Salary s) {
    IF NOT payExtraCash(s) (+) deltaPay(s) < 0.0 THEN {
        payExtraCash(s) <- payExtraCash(s) (+) deltaPay(s);
        deltaPay(s) <- NULL;
    }
    ELSE {
        payExtraCash(s) <- NULL;
        deltaPay(s) <- deltaPay(s) (-) payExtraCash(s);
    }
}

// для подстановки месяца и года из записи "Отчетный месяц" при добавлении новой записи "Зарплата сотрудника"
selectReportingMonth = DATA LOCAL NESTED Month();
selectReportingYear  = DATA LOCAL NESTED INTEGER ();
// для установки указателя текущей записи в таблице "Зарплата сотрудника" на том же сотруднике при перемещении по таблице "Отчетный месяц"
selectEmployee = DATA LOCAL NESTED STRING[150];

FORM salary 'Начисление зарплаты'
    OBJECTS s = Salary PANEL 
    PROPERTIES(s) nameEmployee, nameMonth, year, sumSalary, sumBonus1, sumBonus2, sumBonus3, sumFine1, sumFine2, sumFine3, 
                  note1, note2, isReturn, sumBonusQuarter, ktu
    PROPERTIES(s) READONLY sumPay, sumPayUSD, sumTransfer, absenceHours, deltaReal FOREGROUND(RGB(255,0,0))
    PROPERTIES(s) payExtra, setPayExtra, payExtraCash, setPayExtraCash 
    PROPERTIES(s) FOREGROUND(RGB(0,0,255)) deltaPay READONLY 
    EDIT Salary OBJECT s
    
    EVENTS ON INIT {
        month(s) <- selectReportingMonth();
        year(s) <- selectReportingYear();
    }
;

DESIGN salary {
    OBJECTS {
        NEW cnt1 {
            caption = 'Основные параметры';
            horizontal = TRUE;
            MOVE PROPERTY (nameEmployee(s)) {fontSize = 16;}
            MOVE PROPERTY (nameMonth(s)) {fontSize = 16;}
            MOVE PROPERTY (year(s)) {fontSize = 16;}
            MOVE PROPERTY (sumSalary(s)) {fontSize = 16;}
        }
        NEW cnt2 {
            caption = 'Премии';
            horizontal = TRUE;
            MOVE PROPERTY (sumBonus1(s)) {fontSize = 16;}
            MOVE PROPERTY (sumBonus2(s)) {fontSize = 16;}
            MOVE PROPERTY (sumBonus3(s)) {fontSize = 16;}
        }
        NEW cnt21 {
            caption = 'Премия за квартал';
            horizontal = TRUE;
            MOVE PROPERTY (sumBonusQuarter(s)) {fontSize = 16;}
            MOVE PROPERTY (ktu(s)) {fontSize = 16;}
        }
        NEW cnt3 {
            caption = 'Штрафы';
            horizontal = TRUE;
            MOVE PROPERTY (sumFine1(s)) {fontSize = 16;}
            MOVE PROPERTY (sumFine2(s)) {fontSize = 16;}
            MOVE PROPERTY (sumFine3(s)) {fontSize = 16;}
            MOVE PROPERTY (absenceHours(s)) {fontSize = 16;}
        }
        NEW cnt4 {
            caption = 'Примечания';
            MOVE PROPERTY (note1(s)) {charWidth=140; fontSize = 16;}
            MOVE PROPERTY (note2(s)) {charWidth=140; fontSize = 16;}
        }
        NEW cnt5 {
            caption = 'К выплате';
            horizontal = TRUE;
            MOVE PROPERTY (sumPay(s)) {fontSize = 16;}
            MOVE PROPERTY (sumPayUSD(s)) {fontSize = 16;}
        }
        NEW cnt6 {
            caption = 'Выплаты';
            horizontal = TRUE;
            MOVE PROPERTY (sumTransfer(s)) {fontSize = 16;}
        }
        NEW cnt7 {
            caption = 'Доплатить';
            horizontal = TRUE;
            MOVE PROPERTY (payExtra(s)) {fontSize = 16;}
            MOVE PROPERTY (setPayExtra(s)){fontSize = 16;}
            MOVE PROPERTY (payExtraCash(s)) {fontSize = 16;}
            MOVE PROPERTY (setPayExtraCash(s)){fontSize = 16;}
            MOVE PROPERTY (deltaPay(s)) {fontSize = 16;}
        }
        NEW cnt8 {
            caption = 'Доп. параметры';
            MOVE PROPERTY (isReturn(s));
            MOVE PROPERTY (deltaReal(s)) {fontSize = 16;}
        }    
    }
}

// Выбор операции
FORM listMoveMoneyOprerationSalary 'Справочник операций'
    OBJECTS o = MoveMoneyOpreration
    PROPERTIES (o) READONLY code, name
    FILTERS atr(o)='1'
;

changeMoveMoneyOprerationSalary(Transfer t) {
    DIALOG listMoveMoneyOprerationSalary OBJECTS o=operation(t) INPUT DO operation(t)<-o;
}
//

FORM transfer 'Выплата'
    OBJECTS t = Transfer PANEL
    PROPERTIES(t) date, number, nameMonth, year, nameEmployee, nameOperation ON CHANGE changeMoveMoneyOprerationSalary(t), sum, note, nameTypePayment, codeRegisterAccounting
    EDIT Transfer OBJECT t
    EVENTS ON APPLY BEFORE {
        beforeCanceled() <- NULL;
        IF date(t) > lastDayOfMonth(sumMonth(currentDate(), 1)) OR date(t) < firstDayOfMonth(sumMonth(currentDate(), -1)) THEN {
            ASK 'Внимание ! \n\n Дата выплаты далеко отстоит от текущей даты : ' + toChar(date(t), 'DD.MM.YYYY') +
                '\n\n Сохранить выплату ?' DO {
            }
            ELSE beforeCanceled() <- TRUE;
        }
    }
;

DESIGN transfer {
    OBJECTS {
        NEW cnt1 {
            MOVE PROPERTY (date(t));
            MOVE PROPERTY (number(t));
            MOVE PROPERTY (nameMonth(t));
            MOVE PROPERTY (year(t));
            MOVE PROPERTY (nameEmployee(t)) {charWidth=80;}
            MOVE PROPERTY (nameOperation(t));
            MOVE PROPERTY (sum(t));
            MOVE PROPERTY (note(t));
            MOVE PROPERTY (nameTypePayment(t));
            MOVE PROPERTY (codeRegisterAccounting(t));
        }
    }
}

addAllSalaries 'Добавить сотрудников' (ReportingMonth r) {
    IF countSalaryReportingMonth(r) THEN {
        MESSAGE 'Сотрудники уже были добавлены.';
        RETURN ;
    }
    IF closed(r) THEN {
        MESSAGE 'Отчетный месяц закрыт.';
        RETURN ;
    }
    LOCAL maxYear  = INTEGER ();
    LOCAL maxMonth = Month ();
    maxYear()  <- NULL;
    maxMonth() <- NULL;
    maxYear()  <- GROUP MAX year(Salary s);
    maxMonth() <- month(GROUP MAX number(month(Salary s)) IF year(s)=maxYear()) ;
    
    FOR Employee e IS Employee AND NOT inactive(e) AND personalAccount(e) AND NOT dateDismissal(e) NEW s = Salary DO {
        month(s) <- month(r);
        year(s) <- year(r);
        employee(s) <- e;
        sumSalary(s) <- sumSalary(salary(e,maxYear(),maxMonth()));
        note1(s) <- note1(salary(e,maxYear(),maxMonth()));
        note2(s) <- note2(salary(e,maxYear(),maxMonth()));
        sumPay(s) <- sumSalary(s);
        payExtra(s) <- sumPay(s) (-) sumTransfer(e,month(r),year(r));
        deltaReal(s) <- sumPay(s) (-) sumTransfer(e,month(r),year(r));
        IF curRate(r) AND curRate(r) > 0.0 THEN sumPayUSD(s) <- round2(sumPay(s) / curRate(r));
    }
    APPLY; 
    
} TOOLBAR ;

background(ReportingMonth r) = CASE WHEN NOT closed(r) THEN RGB(212,255,212);

background(Salary s) = CASE WHEN sumPay(s) (-) sumTransfer(s) < 0 THEN RGB(255,214,212)
                                     WHEN sumPay(s) (-) sumTransfer(s) > 0 THEN RGB(212,255,212) ;

newTransfer 'Добавить' (ReportingMonth r, Salary s) {
    NEWSESSION {
        NEW t = Transfer {
            date(t) <- currentDate();
            month(t) <- month(r);
            year(t) <- year(r);
            employee(t) <- employee(s);
            registerAccounting(t) <- registerAccounting('BYN/NAL LS');
            SHOW transfer OBJECTS t=t MANAGESESSION;
        }
    }
} IMAGE 'add.png';

FORM salaries 'Начисление зарплаты'
    OBJECTS r = ReportingMonth
    PROPERTIES(r) READONLY BACKGROUND background(r) nameMonth, year, curRate, sumBonus, closed, note
    PROPERTIES(r) addAllSalaries
    PROPERTIES NEWSESSION newReportingMonth() DRAW r TOOLBAR
    PROPERTIES(r) NEWSESSION editReportingMonth TOOLBAR 
    PROPERTIES(r) READONLYIF countSalaryReportingMonth(r) OR closed(r) NEWSESSION DELETE
    
    OBJECTS s = Salary
    PROPERTIES(s) BACKGROUND background(s) in
    PROPERTIES(s) READONLY BACKGROUND background(s) nameEmployee, sumSalary, sumBonus, sumFine, sumPay, sumPayUSD, payExtra, payExtraCash, deltaPay, sumTransfer BACKGROUND RGB(250,250,210) 
    PROPERTIES(s) READONLY BACKGROUND background(s) deltaReal BACKGROUND RGB(255,240,245), isReturn, note1, note2, ktu, absenceHours
    PROPERTIES(s) READONLY BACKGROUND background(s) numberMonth, nameMonth, year
    PROPERTIES(s) READONLYIF closed(r) NEWSESSION NEW, EDIT
    ORDERS nameEmployee(s)
    FILTERS month(s)==month(r) AND year(s)==year(r)
    FILTERGROUP salary
        FILTER 'С отклонением' sumPay(s) (-) sumTransfer(s) != 0.0
        FILTER 'С отклонением положительным' sumPay(s) (-) sumTransfer(s) > 0.0
        FILTER 'С отклонением отрицательным' sumPay(s) (-) sumTransfer(s) < 0.0
    
    OBJECTS t = Transfer LAST 
    PROPERTIES(t) in
    PROPERTIES(t) READONLY numberMonth, nameMonth, year, number, date, nameEmployee, codeOperation, nameOperation, sum, note, nameTypePayment, codeRegisterAccounting
    PROPERTIES READONLYIF closed(r) newTransfer(r, s) TOOLBAR DRAW t
    PROPERTIES(t) NEWSESSION EDIT
    ORDERS year(t), numberMonth(t), date(t), nameEmployee(t)
    
    FILTERGROUP transfer
        FILTER 'По сотруднику за месяц' employee(t)==employee(s) AND year(t)==year(s) AND month(t)==month(s) DEFAULT 
        FILTER 'По сотруднику' employee(t)==employee(s)
        FILTER 'За месяц' year(t)==year(r) AND month(t)==month(r)
    EVENTS ON INIT {
        SEEK salaries.r=minReportingMonthNoClosed();
    }
    EVENTS ON CHANGE r {
        selectReportingMonth() <- month(r);
        selectReportingYear() <- year(r);
        SEEK salaries.s = GROUP MAX Salary sal IF nameEmployee(sal)=selectEmployee() AND month(sal)==month(r) AND year(sal)==year(r); 
    }
    EVENTS ON CHANGE s {
        selectEmployee() <- nameEmployee(s);
    }
;

DESIGN salaries {
    MOVE BOX(r) {
        caption='Отчетный месяц: '+staticCaption(minMonthNoClosed())+' '+minYearNoClosed()+'г. ';
        fill=1;
    }
    MOVE BOX(s) {fill=10;}
    MOVE BOX(t) {fill=1;}
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    finance {
        NEW salaries BEFORE nsi;
    }
}

WHEN LOCAL FORMS salary CHANGED(sumPay(Salary s)) DO {
    IF curRate(reportingMonth(year(s),month(s))) THEN sumPayUSD(s) <- round2(sumPay(s) / curRate(reportingMonth(year(s),month(s)))) ;
    ELSE sumPayUSD(s) <- NULL ;
}
WHEN CHANGED(sumPay(Salary s)) OR CHANGED(curRate(reportingMonth(year(s),month(s)))) DO {
    IF curRate(reportingMonth(year(s),month(s))) THEN sumPayUSD(s) <- round2(sumPay(s) / curRate(reportingMonth(year(s),month(s)))) ;
    ELSE sumPayUSD(s) <- NULL ;
}

WHEN LOCAL FORMS salary CHANGED(sumSalary(Salary s)) OR CHANGED(sumBonus1(s)) OR CHANGED(sumBonus2(s)) OR CHANGED(sumBonus3(s)) OR CHANGED(sumBonusQuarter(s)) OR
    CHANGED(sumFine1(s)) OR CHANGED(sumFine2(s)) OR CHANGED(sumFine3(s)) DO {
    sumPay(s) <- sumSalary(s) (+) sumBonus1(s) (+) sumBonus2(s) (+) sumBonus3(s) (+) sumBonusQuarter(s) (-) sumFine1(s) (-) sumFine2(s) (-) sumFine3(s);
}

WHEN CHANGED(sumTransfer(Salary s)) DO {
    deltaPay(s)  <- sumPay(s) (-) sumTransfer(s) (-) payExtra(s) (-) payExtraCash(s) ;
    deltaReal(s) <- sumPay(s) (-) sumTransfer(s);
}
WHEN LOCAL FORMS salary CHANGED(payExtra(Salary s)) OR CHANGED(payExtraCash(s)) DO 
    deltaPay(s)  <- sumPay(s) (-) sumTransfer(s) (-) payExtra(s) (-) payExtraCash(s) ;

WHEN LOCAL FORMS salary CHANGED(sumPay(Salary s)) DO {
    deltaPay(s)  <- sumPay(s) (-) sumTransfer(s) (-) payExtra(s) (-) payExtraCash(s) ;
    deltaReal(s) <- sumPay(s) (-) sumTransfer(s);
}


///// Удаление отмеченных записей
countInSalary = GROUP SUM 1 IF in(Salary s) AND s IS Salary BY reportingMonth(year(s),month(s));

deleteInSalary 'Удалить' (Salary sal)  {
    IF countInSalary(reportingMonth(year(sal),month(sal))) THEN {
        ASK 'Вы действительно хотите удалить отмеченные записи за '+ staticCaption(month(sal)) + ' ' + year(sal) + 'г. '+
            '? \n\n Количество отмеченных записей "Зарплата сотрудника" за отчетный месяц: ' + countInSalary(reportingMonth(year(sal),month(sal))) DO {
            NEWSESSION NESTED LOCAL {
                DELETE Salary s WHERE s IS Salary AND in(s);
                APPLY ;
            }    
        }
    }
    ELSE {
        ASK 'Вы действительно хотите удалить текущую запись "Зарплата сотрудника"  ?' DO {
            NEWSESSION NESTED LOCAL {
                DELETE sal;
                APPLY ;
            }
        }
    }
} IMAGE 'delete.png';

EXTEND FORM salaries
    PROPERTIES(s) READONLYIF closed(r) deleteInSalary TOOLBAR 
;

countInTransfer = GROUP SUM 1 IF in(Transfer t) AND t IS Transfer;

deleteInTransfer 'Удалить' (Transfer tr)  {
    LOCAL NESTED lmess = BOOLEAN ();
    lmess() <- NULL ;
    
    IF countInTransfer() THEN {
        ASK 'Вы действительно хотите удалить отмеченные записи ?\n\n Будут удалены ВСЕ отмеченные записи независимо от отчетного месяца и отборов !'+
            ' \n\n Количество отмеченных записей "Выплаты": ' + countInTransfer()  DO {
            NEWSESSION NESTED LOCAL {
                IF GROUP SUM 1 IF in(Transfer t) AND trim(codeOperation(t)) == 'ЗП' AND trim(codeRegisterAccounting(t)) == 'BYN/NAL LS' 
                    THEN lmess() <- TRUE;
                DELETE Transfer t WHERE t IS Transfer AND in(t);
                APPLY ;
            }
        }
    }
    ELSE {
        ASK 'Вы действительно хотите удалить текущую запись "Выплата"  ?' DO {
            NEWSESSION NESTED LOCAL {
                IF trim(codeOperation(tr)) == 'ЗП' AND trim(codeRegisterAccounting(tr)) == 'BYN/NAL LS' 
                    THEN lmess() <- TRUE;
                DELETE tr;
                APPLY ;
            }
        }
    }
    IF lmess() THEN MESSAGE 'Среди удаленных записей были записи с операцией ЗП по наличным BYN.\n\nНе забудьте откорректировать журнал "Движение денег"';
} IMAGE 'delete.png';

EXTEND FORM salaries
    PROPERTIES(t) deleteInTransfer TOOLBAR
;

///// Сформировать выплаты по текущему месяцу (безнал) 
///// !!!!! Отключено, т.к. осталась только операция 'ЗП' и плюс этой кнопкой не пользовались
generateTransfersCurrentMonth 'Сформ-ть выплаты' (ReportingMonth r) {
    
    LOCAL countTransfer = INTEGER();
    countTransfer() <- OVERRIDE (GROUP SUM 1 IF month(Transfer t) == month(r) AND year(t) == year(r) AND operation(t) == uniqueCode('ЗЗ', '2')), 0;
    LOCAL countTransferNew = INTEGER();
    countTransferNew() <- OVERRIDE (GROUP SUM 1 IF month(Salary s) == month(r) AND year(s) == year(r) AND payExtra(s) AND payExtra(s) != 0.0), 0;
    
    ASK 'Количество выплат планируется за ' + staticCaption(month(r)) + ' ' + year(r) + 'г. :  ' + countTransferNew() + '\n\n' +
        'Количество уже существующих строк с выплатами за ' + staticCaption(month(r)) + ' ' + year(r) + 'г. :  ' + countTransfer() + '\n' +
        (IF countTransfer() > 0 THEN '  Эти строки будут удалены !!!\n\n' ELSE '\n') +
        'Вы действительно хотите сформировать строки с выплатами ?' DO {
        
        IF countTransfer() THEN {
            DELETE Transfer t WHERE t IS Transfer AND month(t) == month(r) AND year(t) == year(r) AND operation(t) == uniqueCode('ЗЗ', '2');
        }
        FOR month(Salary s) == month(r) AND year(s) == year(r) AND payExtra(s) AND payExtra(s) != 0.0 DO NEW t = Transfer {
            date(t) <- lastDayOfMonth(toDateFormat('01' + lpad(TEXT (number(month(r))), 2, '0') + year(r), 'DDMMYYYY'));
            month(t) <- month(r);
            year(t) <- year(r);
            operation(t) <- uniqueCode('ЗЗ', '2');
            employee(t) <- employee(s) ;
            sum(t) <- payExtra(s);
            note(t) <- 'Сформировано программно';
            registerAccounting(t) <- registerAccounting('BYN/BN  LS');
        }
        APPLY ;
    }
}

///// !!!!! Отключено, т.к. осталась только операция 'ЗП' и плюс этой кнопкой не пользовались
//EXTEND FORM salaries
//    PROPERTIES(r) READONLYIF closed(r) generateTransfersCurrentMonth TOOLBAR
//;

///// Сформировать выплаты по текущему месяцу (нал)
///// !!!!! Отключено, т.к. осталась только операция 'ЗП' и плюс этой кнопкой не пользовались
generateTransfersCurrentMonthCash 'Сформ-ть выплаты (нал)' (ReportingMonth r) {

    LOCAL countTransfer = INTEGER();
    countTransfer() <- OVERRIDE (GROUP SUM 1 IF month(Transfer t) == month(r) AND year(t) == year(r) AND operation(t) == uniqueCode('ЗН', '2')), 0;
    LOCAL countTransferNew = INTEGER();
    countTransferNew() <- OVERRIDE (GROUP SUM 1 IF month(Salary s) == month(r) AND year(s) == year(r) AND payExtraCash(s) AND payExtraCash(s) != 0.0), 0;
    
    ASK 'Количество выплат (наличными) планируется за ' + staticCaption(month(r)) + ' ' + year(r) + 'г. :  ' + countTransferNew() + '\n\n' +
        'Количество уже существующих строк с выплатами за ' + staticCaption(month(r)) + ' ' + year(r) + 'г. :  ' + countTransfer() + '\n' +
        (IF countTransfer() > 0 THEN '  Эти строки будут удалены !!!\n\n' ELSE '\n') +
        'Вы действительно хотите сформировать строки с выплатами ?' DO {
        
        IF countTransfer() THEN {
            DELETE Transfer t WHERE t IS Transfer AND month(t) == month(r) AND year(t) == year(r) AND operation(t) == uniqueCode('ЗН', '2');
        }
        FOR month(Salary s) == month(r) AND year(s) == year(r) AND payExtraCash(s) AND payExtraCash(s) != 0.0 DO NEW t = Transfer {
            date(t) <- lastDayOfMonth(toDateFormat('01' + lpad(TEXT (number(month(r))), 2, '0') + year(r), 'DDMMYYYY'));
            month(t) <- month(r);
            year(t) <- year(r);
            operation(t) <- uniqueCode('ЗН', '2');
            employee(t) <- employee(s) ;
            sum(t) <- payExtraCash(s);
            note(t) <- 'Сформировано программно';
            registerAccounting(t) <- registerAccounting('BYN/NAL LS');
        }
        APPLY ;
    }
}

///// !!!!! Отключено, т.к. осталась только операция 'ЗП' и плюс этой кнопкой не пользовались
//EXTEND FORM salaries
//    PROPERTIES(r) READONLYIF closed(r) generateTransfersCurrentMonthCash TOOLBAR
//;

///// Перенести отклонение на след.месяц
transferDeviaNextMonth 'Отклонение на след.месяц' (ReportingMonth r) {
    
    LOCAL lYear = INTEGER ();
    LOCAL lMonth = Month ();
    lYear() <- year(r);
    lMonth() <- month(r);
    IF number(lMonth()) < 12 THEN
        lMonth() <- month(number(lMonth()) + 1) ;
    ELSE {
        lMonth() <- month(1);
        lYear() <- lYear() + 1;
    }
    
    IF NOT reportingMonth(lYear(),lMonth()) THEN {
        MESSAGE 'Не введён отчётный месяц: ' + staticCaption(lMonth()) + ' ' + lYear() + 'г.';
        RETURN ;
    }
    
    LOCAL countTransfer = INTEGER();
    countTransfer() <- OVERRIDE (GROUP SUM 1 IF month(Transfer t) == lMonth() AND year(t) == lYear() AND operation(t) == uniqueCode('ЗП', '2') AND type(t)=='1'), 0;
    LOCAL countDeltaReal = INTEGER();
    countDeltaReal() <- OVERRIDE (GROUP SUM 1 IF month(Salary s) == month(r) AND year(s) == year(r) AND deltaReal(s) AND deltaReal(s) != 0.0), 0;
    
    ASK 'Количество отклонений за ' + staticCaption(month(r)) + ' ' + year(r) + 'г. :  ' + countDeltaReal() + '\n\n' +
        'Количество уже существующих строк с отклонениями за ' + staticCaption(lMonth()) + ' ' + lYear() + 'г. :  ' + countTransfer() + '\n' +
        (IF countTransfer() > 0 THEN '  Эти строки будут удалены !!!\n\n' ELSE '\n') +
            'Вы действительно хотите сформировать строки с отклонениями ?' DO {
        
        IF countTransfer() THEN {
            DELETE Transfer t WHERE t IS Transfer AND month(t) == lMonth() AND year(t) == lYear() AND operation(t) == uniqueCode('ЗП', '2') AND type(t)=='1';
        }
        FOR month(Salary s) == month(r) AND year(s) == year(r) AND deltaReal(s) AND deltaReal(s) != 0.0 DO NEW t = Transfer {
            date(t) <- toDateFormat('01' + lpad(TEXT (number(lMonth())), 2, '0') + lYear(), 'DDMMYYYY');
            month(t) <- lMonth();
            year(t) <- lYear();
            operation(t) <- uniqueCode('ЗП', '2');
            employee(t) <- employee(s) ;
            sum(t) <- - deltaReal(s);
            registerAccounting(t) <- registerAccounting('BYN/BN  LS');
            type(t) <- '1';
            note(t) <- 'ОТКЛОНЕНИЕ';
        }
        APPLY ;
    }
}    

EXTEND FORM salaries
    PROPERTIES(r) READONLYIF closed(r) transferDeviaNextMonth TOOLBAR
;

employee = GROUP MAX Employee e BY personalAccount(e);

///// Импорт выплат из XLS-файла
importTransfers 'Импорт выплат'(){
    NEWSESSION {
        LOCAL columnB = STRING(INTEGER);
        LOCAL account = STRING[28] (INTEGER);
        LOCAL sum = NUMERIC[14,2] (INTEGER);
        LOCAL fio = STRING(INTEGER);
        
        LOCAL operation = STRING[2]();
        LOCAL strmes  = STRING[7]();
        LOCAL nummes  = INTEGER();
        LOCAL numyear = INTEGER();
        LOCAL cdok    = STRING();
        LOCAL ddok    = DATE();
        LOCAL qcount  = INTEGER();
        LOCAL qsum    = NUMERIC[14,2]();
        qcount() <- 0;
        qsum()   <- 0;
        LOCAL cstr = STRING();
        cstr() <- '';
        
        INPUT f = EXCELFILE DO {
            IMPORT XLS NOHEADER FROM f TO columnB = B, account = D, sum = G, fio = E ;

            /// определение отчетного месяца
            cstr() <- columnB(14);
            IF NOT (strpos(cstr(), '-') > 0) THEN {
                MESSAGE 'Не определен отчетный месяц и операция (строка 19), отсутствует символ - ';
                RETURN ;
            }
            strmes() <- trim(substr(cstr(), 1, strpos(cstr(), '-') - 1));
            IF NOT (strpos(strmes(), '.') > 0) THEN {
                MESSAGE 'Не определен отчетный месяц (строка 19), отсутствует символ . между месяцем и годом  ' + strmes();
                RETURN ;
            }
            nummes() <- toInteger(trim(substr(strmes(), 1, strpos(strmes(), '.') - 1)));
            IF NOT (nummes() > 0 AND nummes() < 13) THEN {
                MESSAGE 'Не определен отчетный месяц (строка 19) ' + strmes();
                RETURN ;
            }
            numyear() <- toInteger(trim(substrFrom(strmes(), strpos(strmes(), '.') + 1)));
            IF numyear() < 100 AND numyear() > 23 THEN numyear() <- numyear() (+) 2000;
            IF NOT (numyear() > 2023 AND numyear() < 2100) THEN {
                MESSAGE 'Не определен отчетный год (строка 19) ' + strmes();
                RETURN ;
            }
            IF NOT reportingMonth(numyear(), month(nummes())) THEN {
                MESSAGE 'Не введён отчётный месяц: ' + staticCaption(month(nummes())) + ' ' + numyear() + 'г.';
                RETURN ;
            }
            ASK 'Отчетный месяц для выплат из принимаемого файла: ' + staticCaption(month(nummes())) + ' ' + numyear() + 'г.' +
                '\n\n Продолжить создание выплат ?' DO {
            }
            ELSE RETURN ;
            
            /// определение операции
            operation() <- trim(substrFrom(cstr(), strpos(cstr(), '-') + 1));
            IF (NOT length(operation()) == 2) OR NOT uniqueCode(operation(), '2') THEN {
                MESSAGE 'Не определена операция по коду ' + operation();
                RETURN ;
            }
            
            /// определение номера и даты документа выплаты
            cstr() <- columnB(12);
            IF NOT (strpos(cstr(), '№') > 0) THEN {
                MESSAGE 'Не определен номер документа (строка 17), отсутствует символ № ';
                RETURN ;
            }
            cstr() <- trim(substrFrom(cstr(),strpos(cstr(),'№')+1));
            IF NOT (strpos(cstr(), ' от ') > 0) THEN {
                MESSAGE 'Не определены номер и дата документа (строка 17), отсутствуют символы " от " ';
                RETURN ;
            }
            cdok() <- trim(substr(cstr(),1,strpos(cstr(),' от ')-1));
            cstr() <- substrFrom(cstr(),strpos(cstr(),' от ')+4);
            IF NOT (strpos(cstr(), 'г.') > 0) THEN {
                MESSAGE 'Не определена дата документа (строка 17), отсутствуют символы "г." ';
                RETURN ;
            }
            cstr() <- trim(substr(cstr(),1,strpos(cstr(),'г.')-1));
            
            cstr() <- replace(cstr(),' ','.');
            cstr() <- replace(cstr(),'января','01');
            cstr() <- replace(cstr(),'февраля','02');
            cstr() <- replace(cstr(),'марта','03');
            cstr() <- replace(cstr(),'апреля','04');
            cstr() <- replace(cstr(),'мая','05');
            cstr() <- replace(cstr(),'июня','06');
            cstr() <- replace(cstr(),'июля','07');
            cstr() <- replace(cstr(),'августа','08');
            cstr() <- replace(cstr(),'сентября','09');
            cstr() <- replace(cstr(),'октября','10');
            cstr() <- replace(cstr(),'ноября','11');
            cstr() <- replace(cstr(),'декабря','12');
            ddok() <- toDateFormat(cstr(),'DD.MM.YYYY');
            
            IF NOT (ddok() AND ddok()>DATE('2023-01-01') AND ddok()<DATE('2099-01-01')) THEN {
                MESSAGE 'Не определена дата документа (строка 17):  '+cstr();
                RETURN ;
            }
            
            /// Проверка по сотрудникам
            cstr() <- '';
            FOR account(INTEGER i) AND NOT employee(account(i)) AND sum(i) > 0 AND i > 15 ORDER i DO {
                cstr() <- cstr() + columnB(i)+'  '+account(i)+'  '+fio(i)+'\n' ;
            }
            IF length(cstr()) > 1 THEN {
                cstr() <- 'Строки, по которым по р/с не удалось определить сотрудника:\n' + cstr();
                ASK cstr()+'\n  Прервать создание выплат ?'  DO {
                    RETURN ;
                }
            }
            ///
            
            IF transfer(cdok(), ddok(), uniqueCode(operation(), '2')) THEN {
                ASK 'Документ с номером ' + cdok() + ' от ' + toDateDDMMYYYY(ddok()) + ' уже существует в журнале выплат.\n\n  Прервать создание выплат ? \n\n' +
                    'В случае ответа <Нет> старый документ будет УДАЛЁН и примется новый документ !' DO {
                    RETURN ;
                }
                DELETE Transfer t WHERE t IS Transfer AND number(t) = cdok() AND date(t) = ddok() AND operation(t) = uniqueCode(operation(), '2');
            }
            
            FOR account(INTEGER i) AND employee(account(i)) AND sum(i) > 0 AND i > 15 ORDER i NEW t = Transfer DO {
                number(t) <- cdok();
                date(t) <- ddok();
                employee(t) <- employee(account(i));
                sum(t) <- sum(i);
                month(t) <- month(nummes());
                year(t) <- numyear();
                operation(t) <- uniqueCode(operation(), '2');
                registerAccounting(t) <- registerAccounting('BYN/BN  LS');
                qcount() <- qcount() + 1;
                qsum() <- qsum() + sum(i);
            }
        }
        MESSAGE 'Добавлено выплат: '+qcount()+'\n\nИтоговая сумма: '+qsum();
        APPLY;
    }
}

EXTEND FORM salaries
    PROPERTIES READONLYIF closed(r) importTransfers() DRAW t TOOLBAR
;

///// Справка о начислениях в бухгалтерию
FORM printPayExtra 'Начисления в бухгалтерию'
    OBJECTS r = ReportingMonth PANEL
    PROPERTIES (r) READONLY nameMonth, year

    OBJECTS s = Salary
    PROPERTIES(s) nameEmployee, payExtra
    PROPERTIES personalAccount = personalAccount(employee(s))
    ORDERS nameEmployee(s)

    FILTERS month(s)==month(r) AND year(s)==year(r)
;

printPayExtra 'Начисления в бухгалтерию (XLS)' (r)  {
    PRINT printPayExtra OBJECTS r=r XLSX ;
} IMAGE 'print.png' IN print;

EXTEND FORM salaries
    PROPERTIES(r) printPayExtra TOOLBAR 
;

///// Информация по сотруднику
FORM salariesEmployee 'Информация по сотруднику'
    OBJECTS e = Employee PANEL
    PROPERTIES(e) fullName SELECTOR 
    
    OBJECTS s = Salary LAST 
    PROPERTIES(s) READONLY nameMonth, year, sumSalary, sumBonus, sumBonus1, sumBonus2, sumBonus3, sumBonusQuarter, sumFine, sumFine1, sumFine2, sumFine3, sumPay, sumPayUSD, sumTransfer, deltaReal
    PROPERTIES(s) READONLY DRAW e note1, note2
    FILTERS employee(s)=e
;

DESIGN salariesEmployee {
    NEW cnt1 {
        horizontal = FALSE ;
        MOVE PROPERTY(fullName(e));
        MOVE PROPERTY(note1(s)) {charWidth=130;}
        MOVE PROPERTY(note2(s)) {charWidth=130;}
    }
    MOVE BOX(s);
    MOVE TOOLBARBOX;
}

showSalariesEmployee 'По сотруднику' (Salary s){
    SHOW salariesEmployee OBJECTS e = employee(s);
}
EXTEND FORM salaries
    PROPERTIES(s) showSalariesEmployee TOOLBAR 
;


///// Сверка сумм в журналах "Выплаты" и "Расходы"
fillReportForComparisonSumExpenses 'Сверить' (DATE df, DATE dt) {
    LOCAL sumTransfer = NUMERIC[14,2] ();
    LOCAL sumExpenses = NUMERIC[14,2] ();
    LOCAL delta = NUMERIC[14,2] ();
    sumTransfer() <- NULL ;
    sumExpenses() <- NULL ;
    delta() <- NULL ;
    
    sumTransfer() <- GROUP SUM sum(Transfer t) IF date(t)>=df AND date(t)<=dt AND codeOperation(t)='ЗП' AND codeRegisterAccounting(t)='BYN/BN  LS';
    sumExpenses() <- GROUP SUM sum(Expense e)  IF date(e)>=df AND date(e)<=dt AND nameType(e)='ЗП';
    delta() <- OVERRIDE sumTransfer() (-) sumExpenses(), 0.00;
    
    MESSAGE 'Значения итоговых сумм \n\n ' + 'в журнале "Выплаты": ' + toChar((OVERRIDE sumTransfer(), 0.00),'9999999990.99') + '\nв журнале "Расходы": ' + 
            toChar((OVERRIDE sumExpenses(), 0.00),'9999999990.99') + '\n\n Разница: '+toChar(delta(),'9999999990.99');
}

FORM reportForComparisonSumExpenses 'Сверка сумм в журналах "Выплаты" и "Расходы"'
    OBJECTS df = DATE PANEL, dt = DATE PANEL
    PROPERTIES df 'Дата с' = VALUE(df), dt 'Дата по' = VALUE(dt)
//    OBJECTS o = MoveMoneyOpreration PANEL
//    PROPERTIES(o) name SELECTOR
//    OBJECTS r = RegisterAccounting PANEL
//    PROPERTIES(r) code SELECTOR

    PROPERTIES fillReportForComparisonSumExpenses(df, dt)
    
    EVENTS ON INIT {
        SEEK reportForComparisonSumExpenses.df = firstDayOfMonth(currentDate());
        SEEK reportForComparisonSumExpenses.dt = currentDate();
//        SEEK reportForComparisonSumExpenses.o = uniqueCode('ЗП', '2');
//        SEEK reportForComparisonSumExpenses.r = registerAccounting('BYN/BN  LS');
    }
;

DESIGN reportForComparisonSumExpenses {
    OBJECTS {
        NEW cnt {
            caption = 'Интервал дат';
            horizontal = FALSE ;
            MOVE PROPERTY (df);
            MOVE PROPERTY (dt);
        }
        MOVE PROPERTY (fillReportForComparisonSumExpenses(df, dt));
    }
}

NAVIGATOR {
    finance {
        reports {
            NEW reportForComparisonSumExpenses;
        }
    }
}

