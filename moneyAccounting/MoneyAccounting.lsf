MODULE MoneyAccounting;

REQUIRE MoveMoneyOprerationDop, Payment, Expense, Time;
//REQUIRE MoveMoney;

NAMESPACE MoneyAccounting;

noImport 'Не импортировать в Движение денег' = DATA BOOLEAN (MoveMoneyOpreration);

EXTEND FORM viewMoveMoneyOpreration
    PROPERTIES(o) READONLY noImport
;
EXTEND FORM listMoveMoneyOpreration
    PROPERTIES(o) READONLY noImport
;
EXTEND FORM ediMoveMoneyOpreration
    PROPERTIES(o) noImport
;
DESIGN ediMoveMoneyOpreration {
    BOX(o) {
        MOVE PROPERTY (noImport(o));
    }
}

CLASS RegisterAccounting 'Регистр учета';
code 'Код' = DATA STRING[20] (RegisterAccounting) NONULL CHARWIDTH 5;
name 'Название' = DATA STRING[100] (RegisterAccounting) NONULL CHARWIDTH 10;
currency = DATA Currency (RegisterAccounting) NONULL;
shortNameCurrency 'Валюта' (RegisterAccounting r) = shortName(currency(r));
isNoCash 'Безналичный' = DATA BOOLEAN (RegisterAccounting);
koeff 'Коэффициент' = DATA NUMERIC[12,2] (RegisterAccounting) ;
// 1 - внутренний, > 1 - внешний
isInternal 'Внутр./внеш.' = DATA INTEGER (RegisterAccounting);
dateTimeBalance 'Дата/время расчета остатков' = DATA DATETIME (RegisterAccounting);
dateTimeSummaUSD 'Дата/время расчета сумм USD' = DATA DATETIME (RegisterAccounting);

select 'Отм.' = DATA LOCAL NESTED BOOLEAN (RegisterAccounting);
countSelectRegisterAccounting = GROUP SUM 1 IF select(RegisterAccounting r);

registerAccounting = GROUP AGGR (RegisterAccounting r) BY code(r);

FORM viewRegisterAccounting 'Регистры учета'
    OBJECTS r = RegisterAccounting
    PROPERTIES(r) READONLY code, name, shortNameCurrency, isNoCash, koeff, isInternal, dateTimeBalance, dateTimeSummaUSD
    PROPERTIES(r) NEWSESSION NEW, EDIT
    ORDERS name(r)
;

selectAllRegisterAccounting 'Отметить все' () {
    select(RegisterAccounting r) <- TRUE WHERE r IS RegisterAccounting;
}

unSelectAllRegisterAccounting 'Разотметить все' () {
    select(RegisterAccounting r) <- NULL WHERE r IS RegisterAccounting;
}

FORM listRegisterAccounting 'Регистры учета'
    OBJECTS r = RegisterAccounting
    PROPERTIES(r) select
    PROPERTIES(r) READONLY code, name, shortNameCurrency, isNoCash, koeff, isInternal, dateTimeBalance, dateTimeSummaUSD
    PROPERTIES selectAllRegisterAccounting() TOOLBAR, unSelectAllRegisterAccounting() TOOLBAR 
    LIST RegisterAccounting OBJECT r
    ORDERS name(r)
;

FORM editRegisterAccounting 'Регистр учета'
    OBJECTS r = RegisterAccounting PANEL
    PROPERTIES(r) code, name, shortNameCurrency, isNoCash, koeff, isInternal
    EDIT RegisterAccounting OBJECT r
;
DESIGN editRegisterAccounting {
    BOX(r) {
        horizontal = FALSE;
        MOVE PROPERTY (code(r));
        MOVE PROPERTY (name(r));
        MOVE PROPERTY (shortNameCurrency(r));
        MOVE PROPERTY (isNoCash(r));
        MOVE PROPERTY (koeff(r));
        MOVE PROPERTY (isInternal(r));
    }
}

WHEN LOCAL FORMS editRegisterAccounting SETCHANGED(code(RegisterAccounting r)) AND NOT isInternal(r) DO {
    isInternal(r) <- 1;
}

CLASS MoneyMove 'Движение денег';
registerAccounting 'Регистр учета' = DATA RegisterAccounting (MoneyMove);
nameRegisterAccounting 'Регистр учета' = name(registerAccounting(MoneyMove m)) CHARWIDTH 7;
codeRegisterAccounting 'Регистр учета' = code(registerAccounting(MoneyMove m)) CHARWIDTH 7;
shortNameCurrency 'Валюта' = shortNameCurrency(registerAccounting(MoneyMove m));
operation 'Операция' = DATA MoveMoneyOpreration (MoneyMove);
nameOperation 'Операция' = name(operation(MoneyMove m)) CHARWIDTH 7;
codeOperation 'Код операции' = code(operation(MoneyMove m)) CHARWIDTH 3;
nameGrupOperation 'Группа операции' = nameGrupOperation(operation(MoneyMove m)) CHARWIDTH 7;
analytics 'Аналитика' = DATA Analytics (MoneyMove);
nameAnalytics 'Аналитика' = name(analytics(MoneyMove m)) CHARWIDTH 7;
codeAnalytics 'Код аналитики' = code(analytics(MoneyMove m)) CHARWIDTH 3;

date 'Дата' = DATA DATE (MoneyMove);
summa 'Сумма' = DATA NUMERIC[14,2] (MoneyMove);
summaUSD 'Сумма, USD' = DATA NUMERIC[14,2] (MoneyMove);
balance 'Остаток после операции' = DATA NUMERIC[14,2] (MoneyMove);
customer 'Клиент' = DATA Customer (MoneyMove);
nameCustomer 'Клиент' (MoneyMove m) = name(customer(m)) CHARWIDTH 5;
legalEntity 'Организация' = DATA LegalEntity (MoneyMove);
nameLegalEntity 'Организация'(MoneyMove m) = name(legalEntity(m)) CHARWIDTH 5;
employee 'Сотрудник' = DATA Employee (MoneyMove) ;
nameEmployee 'Сотрудник' (MoneyMove m) = fullName(employee(m)) CHARWIDTH 5;
note 'Примечание' = DATA STRING  (MoneyMove) CHARWIDTH 5;
note2 'Примечание-2' = DATA STRING  (MoneyMove) CHARWIDTH 5;
dateTimeEntry 'Время создания' = DATA DATETIME (MoneyMove);
userEntry 'Создан пользователем' = DATA Employee (MoneyMove);
nameUserEntry 'Создан пользователем' (MoneyMove m) = name(userEntry(m)) CHARWIDTH 5;
dateTimeKorr 'Время корр-ки' = DATA DATETIME (MoneyMove);
userKorr 'Корр-ка пользователем' = DATA Employee (MoneyMove);
nameUserKorr 'Корр-ка пользователем' (MoneyMove m) = name(userKorr(m)) CHARWIDTH 5;
file = DATA FILE (MoneyMove);

monthNumber 'Месяц' (MoneyMove m) = extractMonthNumber(date(m));
monthName 'Месяц' (MoneyMove m) = extractMonthName(date(m));
quarter 'Квартал' (MoneyMove m) = CASE WHEN monthNumber(m) < 4 THEN 1
    WHEN monthNumber(m) <  7 AND monthNumber(m) > 3 THEN 2
    WHEN monthNumber(m) < 10 AND monthNumber(m) > 6 THEN 3
    ELSE 4 ;
year 'Год' (MoneyMove m) = extractYear(date(m));

in 'Отм.' = DATA LOCAL BOOLEAN (MoneyMove);

onChangeAnalitics (MoneyMove m) {
    IF typeAnalytics(operation(m)) THEN isReadOnly() <- TRUE;
    filterTypeAnalytics() <- typeAnalytics(operation(m));
    DIALOG listAnalytics OBJECTS a INPUT DO analytics(m) <- a;
    filterTypeAnalytics() <- NULL;
    isReadOnly() <- NULL;
}

FORM editMoneyMove 'Движение денег'
    OBJECTS m = MoneyMove PANEL
    PROPERTIES(m) date, nameOperation, nameRegisterAccounting, summa, balance READONLY, summaUSD READONLY, nameCustomer, nameLegalEntity, nameEmployee, note, note2
    PROPERTIES(m) nameAnalytics ON CHANGE onChangeAnalitics(m)
    EDIT MoneyMove OBJECT m
;

DESIGN editMoneyMove {
    OBJECTS {
        NEW cnt1 {
            MOVE PROPERTY (date(m));
            MOVE PROPERTY (nameRegisterAccounting(m));
            MOVE PROPERTY (nameOperation(m));
            MOVE PROPERTY (nameAnalytics(m));
            MOVE PROPERTY (nameCustomer(m));
            MOVE PROPERTY (nameLegalEntity(m));
            MOVE PROPERTY (nameEmployee(m)) {charWidth = 50;}
        }
        NEW cnt2 {
            caption = 'Суммы';
            MOVE PROPERTY (summa(m)){charWidth = 20;}
            MOVE PROPERTY (balance(m));
            MOVE PROPERTY (summaUSD(m));
        }
        NEW cnt3 {
            alignment = STRETCH;
            caption = 'Примечания';
            MOVE PROPERTY (note(m)) {fill=1;alignment = STRETCH;}
            MOVE PROPERTY (note2(m)) {fill=1;alignment = STRETCH;}
        }
    }
}

WHEN LOCAL FORMS editMoneyMove (CHANGED(date(MoneyMove m)) OR CHANGED(registerAccounting(m)) OR CHANGED(operation(m)) OR CHANGED(summa(m)) OR
    CHANGED(customer(m)) OR CHANGED(legalEntity(m)) OR CHANGED(employee(m))) AND PREV(m IS MoneyMove) DO {
    dateTimeKorr(m) <- currentDateTime();
    userKorr(m) <- currentUser();
}

dateTimeKorr 'Дата/время посл. корр-ки' = GROUP LAST dateTimeKorr(MoneyMove m) ORDER dateTimeKorr(m) BY registerAccounting(m);

balance 'Остаток на дату, на конец дня' = GROUP LAST balance(MoneyMove m) ORDER date(m), codeOperation(m), m WHERE date(m) <= DATE d BY registerAccounting(m),d;

balance 'Текущий остаток' = GROUP LAST balance(MoneyMove m) ORDER date(m), codeOperation(m), m BY registerAccounting(m);

balanceUSD 'Текущий остаток, USD' = CASE 
    WHEN shortName(currency(RegisterAccounting r)) = 'USD' THEN balance(r)
    WHEN shortName(currency(r)) = 'BYN' THEN round2(balance(r) * rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), currentDate()))
    ELSE round2(balance(r) * rateOn(typeExchange('НБРБ (BYN)'), currency(r), currentDate()) * rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), currentDate())) ;

EXTEND FORM viewRegisterAccounting
    PROPERTIES(r) dateTimeKorr, balance
;
EXTEND FORM listRegisterAccounting
    PROPERTIES(r) dateTimeKorr, balance
;

// справка с остатками
FORM listRegisterAccountingSmall 'Регистры учета'
    OBJECTS r = RegisterAccounting
    PROPERTIES(r) READONLY code, name, shortNameCurrency, balance, balanceUSD, dateTimeKorr, dateTimeBalance
    ORDERS name(r)
;
DESIGN listRegisterAccountingSmall {
    size = (600, 500);
}
showRegisterAccountingSmall 'Остатки по регистрам' {
    SHOW listRegisterAccountingSmall;
}
//

recalculateBalance 'Перерасчет остатков' () {
    DIALOG listRegisterAccounting OBJECTS r INPUT DO {
        NEWSESSION {
            IF NOT countSelectRegisterAccounting() THEN select(r) <- TRUE ;
            LOCAL bal = NUMERIC[12,2] ();
            
            FOR select(RegisterAccounting ra) DO {
                bal() <- 0.0;
                FOR registerAccounting(MoneyMove m)==ra ORDER date(m), codeOperation(m), m DO {
                    bal() <- bal() (+) summa(m);
                    balance(m) <- bal();
                }
                dateTimeBalance(ra) <- currentDateTime();
                select(ra) <- NULL ;
            }
            APPLY;
        }
        MESSAGE 'Перерасчет остатков завершен';
    }
}

/// Перерасчет сумм USD
dateStart 'Дата начала перерасчета' = DATA LOCAL DATE ();
isEmpty 'Только незаполненные' = DATA LOCAL BOOLEAN ();

FORM paramRecalculateSummaUSD 'Параметры для перерасчета сумм USD'
    PROPERTIES() dateStart, isEmpty
    
    OBJECTS r = RegisterAccounting
    PROPERTIES(r) select
    PROPERTIES(r) READONLY code, name, shortNameCurrency, isNoCash, koeff, isInternal, dateTimeBalance, dateTimeSummaUSD
    PROPERTIES selectAllRegisterAccounting() TOOLBAR, unSelectAllRegisterAccounting() TOOLBAR
    ORDERS name(r)
;

recalculateSummaUSD 'Перерасчет сумм USD' () {
    dateStart() <- sumMonth(currentDate(),-3);
    isEmpty() <- TRUE;
    
    DIALOG paramRecalculateSummaUSD OBJECTS r INPUT DO {
        NEWSESSION NESTED LOCAL {
            IF NOT countSelectRegisterAccounting() THEN select(r) <- TRUE ;
            // тип обмена - бел. рубль
            LOCAL tBYN = TypeExchange ();
            tBYN() <- GROUP MAX (TypeExchange t) IF name(t) = 'НБРБ (BYN)';
            
            LOCAL s = NUMERIC[18,6] ();
            
            FOR select(RegisterAccounting ra) DO {
                FOR registerAccounting(MoneyMove m)==ra AND date(m)>=dateStart() AND (NOT summaUSD(m) OR NOT isEmpty()) DO {
                    IF shortName(currency(ra)) = 'USD' THEN summaUSD(m) <- summa(m);
                    ELSE {
                        IF shortName(currency(ra)) = 'BYN' THEN s() <- summa(m);
                        ELSE s() <- round6(summa(m) * rateOn(tBYN(), currency(ra), date(m))); // переводим в BYN
                        summaUSD(m) <- round2(s() * rateOn(defaultTypeExchange(), currency(tBYN()), date(m)));
                    }    
                }
                dateTimeSummaUSD(ra) <- currentDateTime();
                select(ra) <- NULL ;
            }
            APPLY;
        }
        MESSAGE 'Перерасчет сумм USD завершен';
    }
}

/// Импорт из журналов "Платежи" и "Расходы"
FORM inputParameters 'Параметры импорта из бух. LuxSoft'
    OBJECTS dateimp = DATE PANEL
    PROPERTIES dateimp 'Дата начала импорта' = VALUE (dateimp)
    EVENTS ON INIT {
        SEEK inputParameters.dateimp = firstDayOfMonth(currentDate());
    }
;

messPayment = DATA LOCAL STRING ();
messExpense = DATA LOCAL STRING ();

importDataPayment 'Импорт платежи' (DATE dv) {
    FOR (Payment p IS Payment) AND date(p) >= dv AND (NOT type(p) OR NOT (GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p)) OR  
      NOT (shortNameCurrency(p)='BYN' OR shortNameCurrency(p) = 'USD' OR shortNameCurrency(p) = 'EUR' OR shortNameCurrency(p) = 'RUB')) ORDER date(p),p DO {
        messPayment() <- messPayment() + '\n' + (OVERRIDE toChar(date(p),'DD.MM.YYYY'),'') + ' ' + (OVERRIDE toChar(sum(p),'9999999.99'),'') + ' ' + OVERRIDE nameType(p),'';
    }
    
    FOR (Payment p IS Payment) AND date(p) >= dv AND type(p) AND (GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p) AND NOT noImport(s)) AND 
      (shortNameCurrency(p)='BYN' OR shortNameCurrency(p) = 'USD' OR shortNameCurrency(p) = 'EUR' OR shortNameCurrency(p) = 'RUB') ORDER date(p),p NEW m = MoneyMove DO {
        date(m) <- date(p);
        operation(m) <- GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p);
        summa(m) <- NUMERIC[14,2](sum(p));
        registerAccounting(m) <- CASE WHEN shortNameCurrency(p) = 'BYN' THEN registerAccounting('BYN/BN  LS')
                                      WHEN shortNameCurrency(p) = 'USD' THEN registerAccounting('USD/BN  LS')
                                      WHEN shortNameCurrency(p) = 'EUR' THEN registerAccounting('EUR/BN  LS')
                                      WHEN shortNameCurrency(p) = 'RUB' THEN registerAccounting('RUR/BN  LS');
        customer(m) <- customer(p);
        legalEntity(m) <- legalEntity(p);
        note(m) <- note(p);
        dateTimeEntry(m) <- currentDateTime();
        userEntry(m) <- currentUser();
    }
}

importDataExpense 'Импорт расходы' (DATE dv) {
    FOR (Expense p IS Expense) AND date(p) >= dv AND (NOT type(p) OR NOT (GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p)) OR
      NOT (shortNameCurrency(p)='BYN' OR shortNameCurrency(p) = 'USD' OR shortNameCurrency(p) = 'EUR' OR shortNameCurrency(p) = 'RUB')) ORDER date(p),p DO {
        messExpense() <- messExpense() + '\n' + (OVERRIDE toChar(date(p),'DD.MM.YYYY'),'') + ' ' + (OVERRIDE toChar(sum(p),'9999999.99'),'') + ' ' + OVERRIDE nameType(p),'';
    }
    
    FOR (Expense p IS Expense) AND date(p) >= dv AND type(p) AND (GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p) AND NOT noImport(s)) AND 
      (shortNameCurrency(p)='BYN' OR shortNameCurrency(p) = 'USD' OR shortNameCurrency(p) = 'EUR' OR shortNameCurrency(p) = 'RUB') ORDER date(p),p NEW m = MoneyMove DO {
        date(m) <- date(p);
        operation(m) <- GROUP MAX (MoveMoneyOpreration s) IF code(s) = nameType(p);
        summa(m) <- -(NUMERIC[14,2](sum(p)));
        registerAccounting(m) <- CASE WHEN shortNameCurrency(p) = 'BYN' THEN registerAccounting('BYN/BN  LS')
                                      WHEN shortNameCurrency(p) = 'USD' THEN registerAccounting('USD/BN  LS')
                                      WHEN shortNameCurrency(p) = 'EUR' THEN registerAccounting('EUR/BN  LS')
                                      WHEN shortNameCurrency(p) = 'RUB' THEN registerAccounting('RUR/BN  LS');
        customer(m) <- customer(p);
        legalEntity(m) <- legalEntity(p);
        note(m) <- note(p);
        dateTimeEntry(m) <- currentDateTime();
        userEntry(m) <- currentUser();
    }
}

importData 'Импорт из бух. LuxSoft' () {
    messPayment() <- '';
    messExpense() <- '';
    
    DIALOG inputParameters OBJECTS dateimp INPUT DO NEWSESSION NESTED LOCAL {
        LOCAL t = TypeExchange ();
        LOCAL mess = STRING ();
        
        DELETE MoneyMove m WHERE m IS MoneyMove AND date(m) >= dateimp AND isNoCash(registerAccounting(m));
        
        importDataPayment(dateimp);
        importDataExpense(dateimp);
        
        // Перерасчет остатков по безналичным регистрам учета, начиная с даты импорта
        LOCAL bal = NUMERIC[12,2] ();

        FOR isNoCash(RegisterAccounting ra) DO {
            bal() <- balance(ra, sum(dateimp,-1));
            FOR registerAccounting(MoneyMove m)==ra AND date(m)>=dateimp ORDER date(m), codeOperation(m), m DO {
                bal() <- bal() (+) summa(m);
                balance(m) <- bal();
            }
            dateTimeBalance(ra) <- currentDateTime();
        }
        //
        
        IF length(messPayment()) > 5 OR length(messExpense()) > 5 THEN {
            IF length(messPayment()) > 5 THEN messPayment() <- '    ПЛАТЕЖИ :\n' + messPayment();
            IF length(messExpense()) > 5 THEN messExpense() <- '\n\n    РАСХОДЫ :\n' + messExpense();
            mess() <- 'Некорректные записи при импорте из бух. LuxSoft :\n\n' + messPayment() + messExpense();
            MESSAGE mess();
        }
        APPLY ;
    } ELSE MESSAGE 'Выполнение импорта из бух. LuxSoft отменено';
}

///// Добавить запись по текущей
addFromCurrent 'Добавить по тек.'(MoneyMove mmtek)  {
    NEWSESSION {
        NEW m = MoneyMove {
            date(m) <- currentDate();
            registerAccounting(m) <- registerAccounting(mmtek);
            operation(m) <- operation(mmtek);
            customer(m) <- customer(mmtek);
            legalEntity(m) <- legalEntity(mmtek);
            employee(m) <- employee(mmtek);
            summa(m) <- summa(mmtek);
            note(m) <- note(mmtek);
            note2(m) <- note2(mmtek);
            
            SHOW editMoneyMove OBJECTS m = m DOCKED;
        }
    }
}

///// Удаление отмеченных записей
countInMoneyMove = GROUP SUM 1 IF in(MoneyMove m) AND m IS MoneyMove;

deleteInMoneyMove 'Удалить' (MoneyMove m)  {
    NEWSESSION NESTED(in[MoneyMove]) {
        IF countInMoneyMove() THEN {
            ASK 'Вы действительно хотите удалить отмеченные записи  ?'+
                '\n\n Количество отмеченных записей  ' + countInMoneyMove() DO {
                DELETE MoneyMove mm WHERE mm IS MoneyMove AND in(mm);
                APPLY ;
            }
        }
        ELSE {
            ASK 'Вы действительно хотите удалить текущую запись  ?' DO {
                NEWSESSION NESTED LOCAL {
                    DELETE m;
                    APPLY ;
                }
            }
        }
    }
} IMAGE 'delete.png';

loadFile 'Загрузить' (MoneyMove m) {
    INPUT f = FILE DO {
        NEWSESSION {
            file(m) <- f;
            APPLY ;
        }
    }
}
openFile 'Открыть' (MoneyMove m) { open(file(m)); }

deleteFile 'Удалить' (MoneyMove m) {
    NEWSESSION {
        file(m) <- NULL;
        APPLY ;
    }    
} CONFIRM;

// нужно для отображения по каждой записи в Движении денег
dateTimeBalance 'Дата/время расчета остатков' (MoneyMove m) = dateTimeBalance(registerAccounting(m));
balanceRegisterAccounting 'Текущий остаток' (MoneyMove m) = balance(registerAccounting(m));
//

filterMoneyMoveDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (MoneyMove m) = date(m) >= filterMoneyMoveDateFrom() OR (m IS MoneyMove AND NOT filterMoneyMoveDateFrom());

filterMoneyMoveDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (MoneyMove m) = date(m) <= filterMoneyMoveDateTo() OR (m IS MoneyMove AND NOT filterMoneyMoveDateTo());

filterRegisterAccounting 'Регистр учета' = DATA LOCAL RegisterAccounting ();
nameFilterRegisterAccounting 'Регистр учета' = name(filterRegisterAccounting()) CHARWIDTH 15;
filterRegisterAccounting(MoneyMove m) = registerAccounting(m) == filterRegisterAccounting() OR (m IS MoneyMove AND NOT filterRegisterAccounting());

filterGrupOperation 'Группа операций' = DATA LOCAL GrupMoveMoneyOperation ();
nameFilterGrupOperation 'Группа операций' = name(filterGrupOperation()) CHARWIDTH 15;
filterGrupOperation(MoneyMove m) = grup(operation(m)) == filterGrupOperation() OR (m IS MoneyMove AND NOT filterGrupOperation());

filterOperation 'Операция' = DATA LOCAL MoveMoneyOpreration ();
nameFilterOperation 'Операция' = name(filterOperation()) CHARWIDTH 15;
filterOperation(MoneyMove m) = operation(m) == filterOperation() OR (m IS MoneyMove AND NOT filterOperation());

filterCustomer 'Клиент' = DATA LOCAL Customer ();
nameFilterCustomer 'Клиент' = name(filterCustomer()) CHARWIDTH 15;
filterCustomer(MoneyMove m) = customer(m) == filterCustomer() OR (m IS MoneyMove AND NOT filterCustomer());

filterEmployee 'Сотрудник' = DATA LOCAL Employee ();
nameFilterEmployee 'Сотрудник' = name(filterEmployee()) CHARWIDTH 15;
filterEmployee(MoneyMove m) = employee(m) == filterEmployee() OR (m IS MoneyMove AND NOT filterEmployee());

FORM viewMoneyMove 'Движение денег'
    PROPERTIES() filterMoneyMoveDateFrom, filterMoneyMoveDateTo, nameFilterRegisterAccounting, nameFilterGrupOperation, nameFilterOperation, nameFilterCustomer, nameFilterEmployee
    
    OBJECTS m = MoneyMove LAST 
    PROPERTIES(m) in
    PROPERTIES(m) READONLY date, codeOperation, nameOperation, nameGrupOperation, codeRegisterAccounting, nameRegisterAccounting, summa, balance, shortNameCurrency, summaUSD,
                           nameCustomer, nameLegalEntity, nameEmployee, note, note2, dateTimeEntry, nameUserEntry, dateTimeKorr, nameUserKorr,
                           monthNumber, monthName, quarter, year, nameAnalytics, codeAnalytics
    PROPERTIES(m) NEWSESSION EDIT, NEW 
    PROPERTIES(m) loadFile READONLYIF file(m), openFile READONLYIF NOT file(m), deleteFile READONLYIF NOT file(m)
    PROPERTIES showRegisterAccountingSmall() TOOLBAR DRAW m
    PROPERTIES recalculateBalance() TOOLBAR DRAW m
    PROPERTIES recalculateSummaUSD() TOOLBAR DRAW m
    PROPERTIES importData() TOOLBAR DRAW m
    PROPERTIES(m) deleteInMoneyMove TOOLBAR LAST
    PROPERTIES(m) addFromCurrent BEFORE deleteInMoneyMove(m) TOOLBAR DRAW m
    ORDERS date(m), codeOperation(m)
    FILTERS filterDateFrom(m),
        filterDateTo(m),
        filterRegisterAccounting(m),
        filterOperation(m),
        filterGrupOperation(m),
        filterCustomer(m),
        filterEmployee(m)
    
    OBJECTS mm = MoneyMove PANEL    
        PROPERTIES(mm) READONLY note, note2, dateTimeEntry, nameUserEntry, dateTimeKorr, nameUserKorr, dateTimeBalance, balanceRegisterAccounting 
        FILTERS mm=m
;

DESIGN viewMoneyMove {
    OBJECTS {
        NEW headerBox {
            horizontal = TRUE;
            alignment = STRETCH;        
            NEW cntrz {
                caption = 'Текущие значения';
                fill = 1;
                alignment = STRETCH;
                MOVE PROPERTY(note(mm));
                MOVE PROPERTY(note2(mm));
            }
            NEW cntrz1 {
                caption = 'Текущий остаток';
                MOVE PROPERTY(dateTimeBalance(mm)) {caption='Дата/время расчета';}
                MOVE PROPERTY(balanceRegisterAccounting(mm)) {caption='Сумма';}
            }
            NEW cntrz2 {
                caption = 'Создание';
                MOVE PROPERTY(dateTimeEntry(mm)) {caption='Дата/время';}
                MOVE PROPERTY(nameUserEntry(mm)) {caption='Пользователь';}
            }
            NEW cntrz3 {
                caption = 'Корректировка';
                MOVE PROPERTY(dateTimeKorr(mm)) {caption='Дата/время';}
                MOVE PROPERTY(nameUserKorr(mm)) {caption='Пользователь';}
            }
        }
        NEW headerBox2 {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW topFilters {
                caption = 'Фильтры';
                fill = 1;
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY (filterMoneyMoveDateFrom());
                MOVE PROPERTY (filterMoneyMoveDateTo());
                MOVE PROPERTY(nameFilterRegisterAccounting());
                MOVE PROPERTY (nameFilterGrupOperation());
                MOVE PROPERTY (nameFilterOperation());
                MOVE PROPERTY (nameFilterCustomer());
                MOVE PROPERTY(nameFilterEmployee());
            }
            NEW loadFile {
                caption = 'Файл';
                horizontal = TRUE;
                MOVE PROPERTY (loadFile(m));
                MOVE PROPERTY (openFile(m));
                MOVE PROPERTY (deleteFile(m));
            }
        }
        MOVE BOX(m);
    }
}

NAVIGATOR {
    finance {
        NEW viewMoneyMove BEFORE nsi;
        nsi {
            NEW viewRegisterAccounting;
        }
    }
}

WHEN SET(MoneyMove m IS MoneyMove) DO {
    dateTimeEntry(m) <- currentDateTime();
    userEntry(m) <- currentUser();
}

///// Отчёт в Excel по остаткам на регистрах учета за год по месяцам
nameMonth 'Месяц' (INTEGER m) = CASE EXCLUSIVE
    WHEN m == 1  THEN 'Январь'
    WHEN m == 2  THEN 'Февраль'
    WHEN m == 3  THEN 'Март'
    WHEN m == 4  THEN 'Апрель'
    WHEN m == 5  THEN 'Май'
    WHEN m == 6  THEN 'Июнь'
    WHEN m == 7  THEN 'Июль'
    WHEN m == 8  THEN 'Август'
    WHEN m == 9  THEN 'Сентябрь'
    WHEN m == 10 THEN 'Октябрь'
    WHEN m == 11 THEN 'Ноябрь'
    WHEN m == 12 THEN 'Декабрь'
    MATERIALIZED;

isInternalParam 'внутренний/внешний' = DATA LOCAL NESTED INTEGER ();
yearParam 'год' = DATA LOCAL NESTED STRING[5] ();

balance 'Остаток на конец месяца' (RegisterAccounting r, INTEGER mes, INTEGER year) = 
    GROUP LAST balance(MoneyMove m) IF date(m)<=lastDayOfMonth(toDateFormat('01' + lpad(TEXT (mes), 2, '0') + year, 'DDMMYYYY')) ORDER date(m), codeOperation(m), m BY registerAccounting(m);

balance 'Остаток на конец месяца' = DATA LOCAL NESTED NUMERIC[14,2] (RegisterAccounting, INTEGER);
deltaBalance 'Разница к пред.месяцу' = DATA LOCAL NESTED NUMERIC[14,2] (RegisterAccounting, INTEGER);

balanceUSD 'Остаток на конец месяца USD' = DATA LOCAL NESTED NUMERIC[14,2] (RegisterAccounting, INTEGER);
balanceUSD 'Остаток на конец месяца USD, итог' = DATA LOCAL NESTED NUMERIC[14,2] (INTEGER);
rateUSD 'Курс на конец месяца USD' = DATA LOCAL NESTED NUMERIC[20,13] (RegisterAccounting, INTEGER);

balanceBeginYear 'Остаток на начало года' = DATA LOCAL NESTED NUMERIC[14,2] (RegisterAccounting);
balanceBeginYearUSD 'Остаток на начало года, USD' = DATA LOCAL NESTED NUMERIC[14,2] (RegisterAccounting);
balanceBeginYearUSD 'Остаток на начало года, USD, итог' = DATA LOCAL NESTED NUMERIC[14,2] ();
rateBeginYearUSD 'Курс на начало года USD' = DATA LOCAL NESTED NUMERIC[20,13] (RegisterAccounting);
deltaBalanceUSD 'Разница к пред.месяцу, USD, итог' = DATA LOCAL NESTED NUMERIC[14,2] (INTEGER);

FORM reportPerYear 'Отчет за год по регистрам учета'
    OBJECTS r = RegisterAccounting
    PROPERTIES(r) code, name, koeff, dateTimeKorr, dateTimeBalance, balanceBeginYear, balanceBeginYearUSD, rateBeginYearUSD
    PROPERTIES() balanceBeginYearUSD DRAW r, yearParam DRAW r
    
    OBJECTS mes = INTEGER
    PROPERTIES balance(r,mes) COLUMNS(mes) HEADER nameMonth(mes) FOOTER balanceUSD(mes)
    PROPERTIES deltaBalance(r,mes) COLUMNS(mes)
    PROPERTIES balanceUSD(r,mes) COLUMNS(mes)
    PROPERTIES deltaBalanceUSD(mes) COLUMNS(mes)
    PROPERTIES rateUSD(r,mes) COLUMNS(mes)
    
    FILTERS iterate(mes,1,12),
            isInternal(r)=isInternalParam() OR isInternalParam()=0
    
    OBJECTS a = LegalEntity.Account
    PROPERTIES(a) number, nameBank, balance, balanceCurrency, note
    FILTERS id(legalEntity(a))=='1' AND active(a) AND balance(a)
;

fillReportPerYear 'Сформировать (XLS)' (INTEGER year, INTEGER isInternal) {
    
    isInternalParam() <- isInternal;
    yearParam() <- toChar(year,'9999');
    
    balanceBeginYear(RegisterAccounting r) <- NULL ;
    balanceBeginYearUSD(RegisterAccounting r) <- NULL ;
    balance(RegisterAccounting r, INTEGER mes) <- NULL ;
    deltaBalance(RegisterAccounting r, INTEGER mes) <- NULL ;
    balanceUSD(RegisterAccounting r, INTEGER mes) <- NULL ;
    rateUSD(RegisterAccounting r, INTEGER mes) <- NULL ;
    balanceUSD(INTEGER mes) <- NULL ;
    deltaBalanceUSD(INTEGER mes) <- NULL ;
    rateBeginYearUSD(RegisterAccounting r) <- NULL ;
    
    // остатки на начало года
    balanceBeginYear(RegisterAccounting r) <- balance(r,12,year-1) IF isInternal(r)=isInternal OR isInternal=0;

    rateBeginYearUSD(RegisterAccounting r) <- CASE
        WHEN shortName(currency(r)) = 'USD' THEN 1.0
        WHEN shortName(currency(r)) = 'BYN' THEN rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), sum(toDateFormat('0101' + STRING[4](year), 'DDMMYYYY'),-1))
        ELSE rateOn(typeExchange('НБРБ (BYN)'), currency(r), sum(toDateFormat('0101' + STRING[4](year), 'DDMMYYYY'),-1)) *
            rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), sum(toDateFormat('0101' + STRING[4](year), 'DDMMYYYY'),-1))
        IF (isInternal(r)=isInternal OR isInternal=0);

    balanceBeginYearUSD(RegisterAccounting r) <- round2(balanceBeginYear(r) * rateBeginYearUSD(r) * (OVERRIDE koeff(r),1.0)) IF (isInternal(r)=isInternal OR isInternal=0);
    
    balanceBeginYearUSD() <- GROUP SUM balanceBeginYearUSD(RegisterAccounting r) ;
    
    // остатки по месяцам
    balance(RegisterAccounting r, INTEGER mes) <- balance(r,mes,year) IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0);
    
    deltaBalance(RegisterAccounting r, INTEGER mes) <- (IF mes > 1 THEN balance(r,mes,year) (-) balance(r,mes-1,year)
        ELSE balance(r,mes,year) (-) balanceBeginYear(r)) IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0);

    rateUSD(RegisterAccounting r, INTEGER mes) <- CASE
        WHEN shortName(currency(r)) = 'USD' THEN 1.0  IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0)
        WHEN shortName(currency(r)) = 'BYN' THEN rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), lastDayOfMonth(toDateFormat('01' + lpad(TEXT (mes), 2, '0') + STRING[4](year), 'DDMMYYYY')))
            IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0)
        ELSE rateOn(typeExchange('НБРБ (BYN)'), currency(r), lastDayOfMonth(toDateFormat('01' + lpad(TEXT (mes), 2, '0') + STRING[4](year), 'DDMMYYYY')))
            * rateOn(defaultTypeExchange(), currency(typeExchange('НБРБ (BYN)')), lastDayOfMonth(toDateFormat('01' + lpad(TEXT (mes), 2, '0') + STRING[4](year), 'DDMMYYYY')))
            IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0);

    balanceUSD(RegisterAccounting r, INTEGER mes) <- round2(balance(r,mes,year) * rateUSD(r,mes) * (OVERRIDE koeff(r),1.0)) IF iterate(mes,1,12) AND (isInternal(r)=isInternal OR isInternal=0);
    // итоги
    balanceUSD(INTEGER mes) <- GROUP SUM balanceUSD(RegisterAccounting r, mes) ;
    deltaBalanceUSD(INTEGER mes) <- (IF mes > 1 THEN balanceUSD(mes) (-) balanceUSD(mes-1)
        ELSE balanceUSD(mes) (-) balanceBeginYearUSD()) IF iterate(mes,1,12);
    
    PRINT reportPerYear XLSX ;
}

FORM reportPerYearParameters 'Отчет за год по регистрам учета'
    OBJECTS year = INTEGER PANEL
    PROPERTIES(year) y = VALUE
    OBJECTS isInternal = INTEGER PANEL
    PROPERTIES(isInternal) internal = VALUE
    
    PROPERTIES fillReportPerYear(year, isInternal)
    
    EVENTS ON INIT {
        SEEK reportPerYearParameters.year = extractYear(currentDate());
        SEEK reportPerYearParameters.isInternal = 0;
    }
;

DESIGN reportPerYearParameters {
    NEW report {
        fill = 1;
        NEW params {
            MOVE PROPERTY(y) {caption = 'Год';}
            MOVE PROPERTY(internal) {caption = 'Внутренний/внешний (0 - все)';} 
        }
        MOVE PROPERTY(fillReportPerYear(year, isInternal));
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    finance {
        NEW FOLDER reports 'Отчеты' {
            NEW reportPerYearParameters;
        }
    }
}

//// Первоначальный импорт из журнала "Движение финансов"
//initialImport 'Первоначальный импорт' {
//    ASK 'Внимание!   Будут удалены все записи в журнале! \n\n Продолжить первоначальный импорт ?' DO {
//        NEWSESSION {
//
//            DELETE MoneyMove m WHERE m IS MoneyMove;
//
//            FOR (MoveMoney mm IS MoveMoney) AND (codeSource(mm) = 'БУХ' OR codeSource(mm) = 'КАС' OR codeSource(mm)=='') AND
//                (nameCurrency(mm) = 'BYN' OR nameCurrency(mm) = 'USD' OR nameCurrency(mm) = 'RUB' OR nameCurrency(mm) = 'EUR') ORDER date(mm) DO NEW m = MoneyMove {
//                date(m) <- date(mm);
//                operation(m) <- operation(mm);
//                summa(m) <- suma(mm);
//                customer(m) <- customer(mm);
//                legalEntity(m) <- legalEntity(mm);
//                note(m) <- note(mm);
//                registerAccounting(m) <- CASE WHEN codeSource(mm)  = 'БУХ' AND nameCurrency(mm) = 'BYN' THEN registerAccounting('BYN/BN')
//                                              WHEN (codeSource(mm) = 'КАС' OR codeSource(mm)=='') AND nameCurrency(mm) = 'BYN' THEN registerAccounting('BYN/NAL')
//                                              WHEN codeSource(mm)  = 'БУХ' AND nameCurrency(mm) = 'USD' THEN registerAccounting('USD/BN')
//                                              WHEN (codeSource(mm) = 'КАС' OR codeSource(mm)=='')  AND nameCurrency(mm) = 'USD' THEN registerAccounting('USD/NAL')
//                                              WHEN codeSource(mm)  = 'БУХ' AND nameCurrency(mm) = 'RUB' THEN registerAccounting('RUR/BN')
//                                              WHEN (codeSource(mm) = 'КАС' OR codeSource(mm)=='')  AND nameCurrency(mm) = 'RUB' THEN registerAccounting('RUR/NAL')
//                                              WHEN codeSource(mm)  = 'БУХ' AND nameCurrency(mm) = 'EUR' THEN registerAccounting('EUR/BN')
//                ;
//                dateTimeEntry(m) <- currentDateTime();
//                userEntry(m) <- currentUser();
//            }
//            APPLY;
//        }
//        MESSAGE 'Первоначальный импорт завершен';
//    }
//}
//
//EXTEND FORM viewMoneyMove
//    PROPERTIES() initialImport TOOLBAR 
//;
////

//// Удалить все записи из журнала "Движение финансов"
//deleteAll 'Удалить все записи по безналичным регистрам учета' {
//    ASK 'Внимание!   Будут удалены все записи  в журнале по безналичным регистрам учета ! \n\n Продолжить ?' DO {
//        NEWSESSION {
//            DELETE MoneyMove m WHERE m IS MoneyMove AND isNoCash(registerAccounting(m));
//            APPLY ;
//        }
//    }
//}
//
//EXTEND FORM viewMoneyMove
//    PROPERTIES() deleteAll TOOLBAR
//;
